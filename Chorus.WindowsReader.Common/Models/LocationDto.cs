// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/location.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbr = global::Google.Protobuf.Reflection;
namespace Chorus.WindowsReader.Common
{

    /// <summary>Holder for reflection information generated from Proto/location.proto</summary>
    public static partial class LocationReflection
    {

        #region Descriptor
        /// <summary>File descriptor for Proto/location.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static LocationReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChRQcm90by9sb2NhdGlvbi5wcm90bxIVZ29vZ2xlLnNjb3V0LnYxYWxwaGEx",
                  "IjsKCEdlb1BvaW50EhYKDmxhdGl0dWRlX21pY3JvGAEgASgREhcKD2xvbmdp",
                  "dHVkZV9taWNybxgCIAEoESKTAgoPRGVyaXZlZExvY2F0aW9uEi4KBXBvaW50",
                  "GAEgASgLMh8uZ29vZ2xlLnNjb3V0LnYxYWxwaGExLkdlb1BvaW50EhMKC2Fj",
                  "Y3VyYWN5X2NtGAIgASgFEkUKBnNvdXJjZRgDIAEoDjI1Lmdvb2dsZS5zY291",
                  "dC52MWFscGhhMS5EZXJpdmVkTG9jYXRpb24uTG9jYXRpb25Tb3VyY2UidAoO",
                  "TG9jYXRpb25Tb3VyY2USHwobTE9DQVRJT05fU09VUkNFX1VOU1BFQ0lGSUVE",
                  "EAASCAoER05TUxABEiYKIldJRklfQUNDRVNTX1BPSU5UU19BTkRfQ0VMTF9U",
                  "T1dFUlMQAhIPCgtLTk9XTl9GSVhFRBADIvkBCgVQbGFjZRJKChBwb2ludF9h",
                  "bmRfcmFkaXVzGAEgASgLMi4uZ29vZ2xlLnNjb3V0LnYxYWxwaGExLlBsYWNl",
                  "Lkdlb1BvaW50QW5kUmFkaXVzSAASFQoNY3VzdG9tZXJfbmFtZRgFIAEoCRIW",
                  "Cg5vd25lcl9vcmdfbmFtZRgGIAEoCRpaChFHZW9Qb2ludEFuZFJhZGl1cxIu",
                  "CgVwb2ludBgBIAEoCzIfLmdvb2dsZS5zY291dC52MWFscGhhMS5HZW9Qb2lu",
                  "dBIVCg1yYWRpdXNfbWV0ZXJzGAIgASgFQgcKBXBsYWNlSgQIAhADSgQIAxAE",
                  "SgQIBBAFImcKD1BsYWNlSWRlbnRpZmllchIUCgpwbGFjZV9uYW1lGAIgASgJ",
                  "SAASGAoOb3duZXJfb3JnX25hbWUYAyABKAlIAUISChBwbGFjZV9pZGVudGlm",
                  "aWVyQhAKDm9yZ19pZGVudGlmaWVyQk0KGWNvbS5nb29nbGUuc2NvdXQudjFh",
                  "bHBoYTFQAVouc291cmNlLmNsb3VkLmdvb2dsZS5jb20vY2hvcnVzLXNjb3V0",
                  "L2FwaS1wcm90b2IGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Chorus.WindowsReader.Common.GeoPoint), global::Chorus.WindowsReader.Common.GeoPoint.Parser, new[]{ "LatitudeMicro", "LongitudeMicro" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chorus.WindowsReader.Common.DerivedLocation), global::Chorus.WindowsReader.Common.DerivedLocation.Parser, new[]{ "Point", "AccuracyCm", "Source" }, null, new[]{ typeof(global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chorus.WindowsReader.Common.Place), global::Chorus.WindowsReader.Common.Place.Parser, new[]{ "PointAndRadius", "CustomerName", "OwnerOrgName" }, new[]{ "Place" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Chorus.WindowsReader.Common.Place.Types.GeoPointAndRadius), global::Chorus.WindowsReader.Common.Place.Types.GeoPointAndRadius.Parser, new[]{ "Point", "RadiusMeters" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chorus.WindowsReader.Common.PlaceIdentifier), global::Chorus.WindowsReader.Common.PlaceIdentifier.Parser, new[]{ "PlaceName", "OwnerOrgName" }, new[]{ "PlaceIdentifier", "OrgIdentifier" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
    public sealed partial class GeoPoint : pb::IMessage<GeoPoint>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<GeoPoint> _parser = new pb::MessageParser<GeoPoint>(() => new GeoPoint());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<GeoPoint> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Chorus.WindowsReader.Common.LocationReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GeoPoint()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GeoPoint(GeoPoint other) : this()
        {
            latitudeMicro_ = other.latitudeMicro_;
            longitudeMicro_ = other.longitudeMicro_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GeoPoint Clone()
        {
            return new GeoPoint(this);
        }

        /// <summary>Field number for the "latitude_micro" field.</summary>
        public const int LatitudeMicroFieldNumber = 1;
        private int latitudeMicro_;
        /// <summary>
        /// Latitude in microdegrees. Latitudes south of the equator are expressed as
        /// negative values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LatitudeMicro
        {
            get { return latitudeMicro_; }
            set
            {
                latitudeMicro_ = value;
            }
        }

        /// <summary>Field number for the "longitude_micro" field.</summary>
        public const int LongitudeMicroFieldNumber = 2;
        private int longitudeMicro_;
        /// <summary>
        /// Longitude in microdegrees. Longitudes west of the prime meridian are
        /// expressed as negative values.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LongitudeMicro
        {
            get { return longitudeMicro_; }
            set
            {
                longitudeMicro_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other)
        {
            return Equals(other as GeoPoint);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(GeoPoint other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (LatitudeMicro != other.LatitudeMicro) return false;
            if (LongitudeMicro != other.LongitudeMicro) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode()
        {
            int hash = 1;
            if (LatitudeMicro != 0) hash ^= LatitudeMicro.GetHashCode();
            if (LongitudeMicro != 0) hash ^= LongitudeMicro.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (LatitudeMicro != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LatitudeMicro);
      }
      if (LongitudeMicro != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(LongitudeMicro);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (LatitudeMicro != 0)
            {
                output.WriteRawTag(8);
                output.WriteSInt32(LatitudeMicro);
            }
            if (LongitudeMicro != 0)
            {
                output.WriteRawTag(16);
                output.WriteSInt32(LongitudeMicro);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize()
        {
            int size = 0;
            if (LatitudeMicro != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LatitudeMicro);
            }
            if (LongitudeMicro != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LongitudeMicro);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(GeoPoint other)
        {
            if (other == null)
            {
                return;
            }
            if (other.LatitudeMicro != 0)
            {
                LatitudeMicro = other.LatitudeMicro;
            }
            if (other.LongitudeMicro != 0)
            {
                LongitudeMicro = other.LongitudeMicro;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LatitudeMicro = input.ReadSInt32();
            break;
          }
          case 16: {
            LongitudeMicro = input.ReadSInt32();
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 8:
                        {
                            LatitudeMicro = input.ReadSInt32();
                            break;
                        }
                    case 16:
                        {
                            LongitudeMicro = input.ReadSInt32();
                            break;
                        }
                }
            }
        }
#endif

    }

    /// <summary>
    /// Our best guess for the device's location, typically based on GPS or nearby
    /// WiFi access points. Devices with LTE connections may also fall back to using
    /// information about the nearest cell tower to determine their location.
    /// Currently, GPS is preferred, followed by WiFi access points and then by cell
    /// tower information.
    ///
    /// This is backed by a version of Google's Geolocation API:
    /// https://developers.google.com/maps/documentation/geolocation/intro
    /// </summary>
    [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
    public sealed partial class DerivedLocation : pb::IMessage<DerivedLocation>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<DerivedLocation> _parser = new pb::MessageParser<DerivedLocation>(() => new DerivedLocation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<DerivedLocation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Chorus.WindowsReader.Common.LocationReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DerivedLocation()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DerivedLocation(DerivedLocation other) : this()
        {
            point_ = other.point_ != null ? other.point_.Clone() : null;
            accuracyCm_ = other.accuracyCm_;
            source_ = other.source_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DerivedLocation Clone()
        {
            return new DerivedLocation(this);
        }

        /// <summary>Field number for the "point" field.</summary>
        public const int PointFieldNumber = 1;
        private global::Chorus.WindowsReader.Common.GeoPoint point_;
        /// <summary>
        /// Our best guess for the lat/lng.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Chorus.WindowsReader.Common.GeoPoint Point
        {
            get { return point_; }
            set
            {
                point_ = value;
            }
        }

        /// <summary>Field number for the "accuracy_cm" field.</summary>
        public const int AccuracyCmFieldNumber = 2;
        private int accuracyCm_;
        /// <summary>
        /// The estimated accuracy of the guess, if available, in centimeters. As in
        /// the Geolocation API, this roughly corresponds to the radius of a circle
        /// around the above point.
        ///
        /// In special cases where the location is known "exactly," this field will be
        /// un-set (i.e., set to 0). For example, if a Chorus Relay has been set up at
        /// a known, fixed location, then we will report its location with this field
        /// un-set.
        ///
        /// Note that this is not always available. For example, Scout v1 units do not
        /// report an accuracy when using GPS, in which case this field would also be
        /// un-set.
        ///
        /// This field's value will never be negative.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int AccuracyCm
        {
            get { return accuracyCm_; }
            set
            {
                accuracyCm_ = value;
            }
        }

        /// <summary>Field number for the "source" field.</summary>
        public const int SourceFieldNumber = 3;
        private global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource source_ = global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource.Unspecified;
        /// <summary>
        /// How the device's location was derived. See the LocationSource enum.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource Source
        {
            get { return source_; }
            set
            {
                source_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other)
        {
            return Equals(other as DerivedLocation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(DerivedLocation other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Point, other.Point)) return false;
            if (AccuracyCm != other.AccuracyCm) return false;
            if (Source != other.Source) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode()
        {
            int hash = 1;
            if (point_ != null) hash ^= Point.GetHashCode();
            if (AccuracyCm != 0) hash ^= AccuracyCm.GetHashCode();
            if (Source != global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource.Unspecified) hash ^= Source.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (point_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Point);
      }
      if (AccuracyCm != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AccuracyCm);
      }
      if (Source != global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource.Unspecified) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Source);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (point_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Point);
            }
            if (AccuracyCm != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(AccuracyCm);
            }
            if (Source != global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource.Unspecified)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)Source);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize()
        {
            int size = 0;
            if (point_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
            }
            if (AccuracyCm != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(AccuracyCm);
            }
            if (Source != global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource.Unspecified)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Source);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(DerivedLocation other)
        {
            if (other == null)
            {
                return;
            }
            if (other.point_ != null)
            {
                if (point_ == null)
                {
                    Point = new global::Chorus.WindowsReader.Common.GeoPoint();
                }
                Point.MergeFrom(other.Point);
            }
            if (other.AccuracyCm != 0)
            {
                AccuracyCm = other.AccuracyCm;
            }
            if (other.Source != global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource.Unspecified)
            {
                Source = other.Source;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (point_ == null) {
              Point = new global::Chorus.WindowsReader.Common.GeoPoint();
            }
            input.ReadMessage(Point);
            break;
          }
          case 16: {
            AccuracyCm = input.ReadInt32();
            break;
          }
          case 24: {
            Source = (global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource) input.ReadEnum();
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            if (point_ == null)
                            {
                                Point = new global::Chorus.WindowsReader.Common.GeoPoint();
                            }
                            input.ReadMessage(Point);
                            break;
                        }
                    case 16:
                        {
                            AccuracyCm = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            Source = (global::Chorus.WindowsReader.Common.DerivedLocation.Types.LocationSource)input.ReadEnum();
                            break;
                        }
                }
            }
        }
#endif

        #region Nested types
        /// <summary>Container for nested types declared in the DerivedLocation message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types
        {
            /// <summary>
            /// Possible methods by which a device's location can be derived.
            ///
            /// WARNING: In the future, this interface will change slightly when we support
            /// "composite" location data derived by "fusing" information from multiple
            /// sources like these.
            /// </summary>
            public enum LocationSource
            {
                [pbr::OriginalName("LOCATION_SOURCE_UNSPECIFIED")] Unspecified = 0,
                /// <summary>
                /// Location was determined by an on-device GNSS receiver.
                ///
                /// This is often colloquially referred to as "GPS" even though modern GNSS
                /// receivers, such as those in Scout units, typically also communicate with
                /// other (i.e., non-GPS) satellite systems, such as GLONASS.
                /// </summary>
                [pbr::OriginalName("GNSS")] Gnss = 1,
                /// <summary>
                /// Location was derived from the WiFi access points and cell tower(s) that
                /// the device was in range of.
                ///
                /// For more details, see Google's Geolocation API:
                /// https://developers.google.com/maps/documentation/geolocation/overview
                /// </summary>
                [pbr::OriginalName("WIFI_ACCESS_POINTS_AND_CELL_TOWERS")] WifiAccessPointsAndCellTowers = 2,
                /// <summary>
                /// The device is known to be installed long-term at a fixed location.
                ///
                /// For example, a Chorus Relay plugged "permanently" into a wall at a known
                /// location will have its locations designated with this source.
                ///
                /// This location source does NOT apply to devices that typically can be
                /// moved around but just happen to be stationary at a given location for a
                /// long period of time. "KNOWN_FIXED" is typically reserved for aggregators
                /// that are fixed in one place long-term.
                /// </summary>
                [pbr::OriginalName("KNOWN_FIXED")] KnownFixed = 3,
            }

        }
        #endregion

    }

    [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
    public sealed partial class Place : pb::IMessage<Place>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<Place> _parser = new pb::MessageParser<Place>(() => new Place());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Place> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Chorus.WindowsReader.Common.LocationReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Place()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Place(Place other) : this()
        {
            customerName_ = other.customerName_;
            ownerOrgName_ = other.ownerOrgName_;
            switch (other.PlaceCase)
            {
                case PlaceOneofCase.PointAndRadius:
                    PointAndRadius = other.PointAndRadius.Clone();
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Place Clone()
        {
            return new Place(this);
        }

        /// <summary>Field number for the "point_and_radius" field.</summary>
        public const int PointAndRadiusFieldNumber = 1;
        /// <summary>
        /// See GeoPointAndRadius. This is currently the only supported type of
        /// Place, but more types will be supported in the future.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Chorus.WindowsReader.Common.Place.Types.GeoPointAndRadius PointAndRadius
        {
            get { return placeCase_ == PlaceOneofCase.PointAndRadius ? (global::Chorus.WindowsReader.Common.Place.Types.GeoPointAndRadius)place_ : null; }
            set
            {
                place_ = value;
                placeCase_ = value == null ? PlaceOneofCase.None : PlaceOneofCase.PointAndRadius;
            }
        }

        /// <summary>Field number for the "customer_name" field.</summary>
        public const int CustomerNameFieldNumber = 5;
        private string customerName_ = "";
        /// <summary>
        /// Place name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string CustomerName
        {
            get { return customerName_; }
            set
            {
                customerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "owner_org_name" field.</summary>
        public const int OwnerOrgNameFieldNumber = 6;
        private string ownerOrgName_ = "";
        /// <summary>
        /// Optional. The name of the organization that owns places.
        /// The caller's org must have the ADMIN role over this organization.
        ///
        /// If omitted, the caller's org will be the owner.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string OwnerOrgName
        {
            get { return ownerOrgName_; }
            set
            {
                ownerOrgName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        private object place_;
        /// <summary>Enum of possible cases for the "place" oneof.</summary>
        public enum PlaceOneofCase
        {
            None = 0,
            PointAndRadius = 1,
        }
        private PlaceOneofCase placeCase_ = PlaceOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PlaceOneofCase PlaceCase
        {
            get { return placeCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPlace()
        {
            placeCase_ = PlaceOneofCase.None;
            place_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other)
        {
            return Equals(other as Place);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Place other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(PointAndRadius, other.PointAndRadius)) return false;
            if (CustomerName != other.CustomerName) return false;
            if (OwnerOrgName != other.OwnerOrgName) return false;
            if (PlaceCase != other.PlaceCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode()
        {
            int hash = 1;
            if (placeCase_ == PlaceOneofCase.PointAndRadius) hash ^= PointAndRadius.GetHashCode();
            if (CustomerName.Length != 0) hash ^= CustomerName.GetHashCode();
            if (OwnerOrgName.Length != 0) hash ^= OwnerOrgName.GetHashCode();
            hash ^= (int)placeCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (placeCase_ == PlaceOneofCase.PointAndRadius) {
        output.WriteRawTag(10);
        output.WriteMessage(PointAndRadius);
      }
      if (CustomerName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CustomerName);
      }
      if (OwnerOrgName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OwnerOrgName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (placeCase_ == PlaceOneofCase.PointAndRadius)
            {
                output.WriteRawTag(10);
                output.WriteMessage(PointAndRadius);
            }
            if (CustomerName.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(CustomerName);
            }
            if (OwnerOrgName.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(OwnerOrgName);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize()
        {
            int size = 0;
            if (placeCase_ == PlaceOneofCase.PointAndRadius)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PointAndRadius);
            }
            if (CustomerName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomerName);
            }
            if (OwnerOrgName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerOrgName);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Place other)
        {
            if (other == null)
            {
                return;
            }
            if (other.CustomerName.Length != 0)
            {
                CustomerName = other.CustomerName;
            }
            if (other.OwnerOrgName.Length != 0)
            {
                OwnerOrgName = other.OwnerOrgName;
            }
            switch (other.PlaceCase)
            {
                case PlaceOneofCase.PointAndRadius:
                    if (PointAndRadius == null)
                    {
                        PointAndRadius = new global::Chorus.WindowsReader.Common.Place.Types.GeoPointAndRadius();
                    }
                    PointAndRadius.MergeFrom(other.PointAndRadius);
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Chorus.WindowsReader.Common.Place.Types.GeoPointAndRadius subBuilder = new global::Chorus.WindowsReader.Common.Place.Types.GeoPointAndRadius();
            if (placeCase_ == PlaceOneofCase.PointAndRadius) {
              subBuilder.MergeFrom(PointAndRadius);
            }
            input.ReadMessage(subBuilder);
            PointAndRadius = subBuilder;
            break;
          }
          case 42: {
            CustomerName = input.ReadString();
            break;
          }
          case 50: {
            OwnerOrgName = input.ReadString();
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 10:
                        {
                            global::Chorus.WindowsReader.Common.Place.Types.GeoPointAndRadius subBuilder = new global::Chorus.WindowsReader.Common.Place.Types.GeoPointAndRadius();
                            if (placeCase_ == PlaceOneofCase.PointAndRadius)
                            {
                                subBuilder.MergeFrom(PointAndRadius);
                            }
                            input.ReadMessage(subBuilder);
                            PointAndRadius = subBuilder;
                            break;
                        }
                    case 42:
                        {
                            CustomerName = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            OwnerOrgName = input.ReadString();
                            break;
                        }
                }
            }
        }
#endif

        #region Nested types
        /// <summary>Container for nested types declared in the Place message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types
        {
            [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
            public sealed partial class GeoPointAndRadius : pb::IMessage<GeoPointAndRadius>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                , pb::IBufferMessage
#endif
            {
                private static readonly pb::MessageParser<GeoPointAndRadius> _parser = new pb::MessageParser<GeoPointAndRadius>(() => new GeoPointAndRadius());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public static pb::MessageParser<GeoPointAndRadius> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Chorus.WindowsReader.Common.Place.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public GeoPointAndRadius()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public GeoPointAndRadius(GeoPointAndRadius other) : this()
                {
                    point_ = other.point_ != null ? other.point_.Clone() : null;
                    radiusMeters_ = other.radiusMeters_;
                    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public GeoPointAndRadius Clone()
                {
                    return new GeoPointAndRadius(this);
                }

                /// <summary>Field number for the "point" field.</summary>
                public const int PointFieldNumber = 1;
                private global::Chorus.WindowsReader.Common.GeoPoint point_;
                /// <summary>
                /// The center of a circular region.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public global::Chorus.WindowsReader.Common.GeoPoint Point
                {
                    get { return point_; }
                    set
                    {
                        point_ = value;
                    }
                }

                /// <summary>Field number for the "radius_meters" field.</summary>
                public const int RadiusMetersFieldNumber = 2;
                private int radiusMeters_;
                /// <summary>
                /// The radius of a circular region, in meters. Must be strictly positive.
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public int RadiusMeters
                {
                    get { return radiusMeters_; }
                    set
                    {
                        radiusMeters_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override bool Equals(object other)
                {
                    return Equals(other as GeoPointAndRadius);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public bool Equals(GeoPointAndRadius other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (!object.Equals(Point, other.Point)) return false;
                    if (RadiusMeters != other.RadiusMeters) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (point_ != null) hash ^= Point.GetHashCode();
                    if (RadiusMeters != 0) hash ^= RadiusMeters.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void WriteTo(pb::CodedOutputStream output)
                {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                    output.WriteRawMessage(this);
#else
          if (point_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Point);
          }
          if (RadiusMeters != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(RadiusMeters);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
#endif
                }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
                {
                    if (point_ != null)
                    {
                        output.WriteRawTag(10);
                        output.WriteMessage(Point);
                    }
                    if (RadiusMeters != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(RadiusMeters);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(ref output);
                    }
                }
#endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public int CalculateSize()
                {
                    int size = 0;
                    if (point_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
                    }
                    if (RadiusMeters != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RadiusMeters);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void MergeFrom(GeoPointAndRadius other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.point_ != null)
                    {
                        if (point_ == null)
                        {
                            Point = new global::Chorus.WindowsReader.Common.GeoPoint();
                        }
                        Point.MergeFrom(other.Point);
                    }
                    if (other.RadiusMeters != 0)
                    {
                        RadiusMeters = other.RadiusMeters;
                    }
                    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                public void MergeFrom(pb::CodedInputStream input)
                {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                    input.ReadRawMessage(this);
#else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (point_ == null) {
                  Point = new global::Chorus.WindowsReader.Common.GeoPoint();
                }
                input.ReadMessage(Point);
                break;
              }
              case 16: {
                RadiusMeters = input.ReadInt32();
                break;
              }
            }
          }
#endif
                }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                                break;
                            case 10:
                                {
                                    if (point_ == null)
                                    {
                                        Point = new global::Chorus.WindowsReader.Common.GeoPoint();
                                    }
                                    input.ReadMessage(Point);
                                    break;
                                }
                            case 16:
                                {
                                    RadiusMeters = input.ReadInt32();
                                    break;
                                }
                        }
                    }
                }
#endif

            }

        }
        #endregion

    }

    [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
    public sealed partial class PlaceIdentifier : pb::IMessage<PlaceIdentifier>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        , pb::IBufferMessage
#endif
    {
        private static readonly pb::MessageParser<PlaceIdentifier> _parser = new pb::MessageParser<PlaceIdentifier>(() => new PlaceIdentifier());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<PlaceIdentifier> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Chorus.WindowsReader.Common.LocationReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PlaceIdentifier()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PlaceIdentifier(PlaceIdentifier other) : this()
        {
            switch (other.PlaceIdentifierCase)
            {
                case PlaceIdentifierOneofCase.PlaceName:
                    PlaceName = other.PlaceName;
                    break;
            }

            switch (other.OrgIdentifierCase)
            {
                case OrgIdentifierOneofCase.OwnerOrgName:
                    OwnerOrgName = other.OwnerOrgName;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PlaceIdentifier Clone()
        {
            return new PlaceIdentifier(this);
        }

        /// <summary>Field number for the "place_name" field.</summary>
        public const int PlaceNameFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string PlaceName
        {
            get { return HasPlaceName ? (string)placeIdentifier_ : ""; }
            set
            {
                placeIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                placeIdentifierCase_ = PlaceIdentifierOneofCase.PlaceName;
            }
        }
        /// <summary>Gets whether the "place_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPlaceName
        {
            get { return placeIdentifierCase_ == PlaceIdentifierOneofCase.PlaceName; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "place_name" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPlaceName()
        {
            if (HasPlaceName)
            {
                ClearPlaceIdentifier();
            }
        }

        /// <summary>Field number for the "owner_org_name" field.</summary>
        public const int OwnerOrgNameFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string OwnerOrgName
        {
            get { return HasOwnerOrgName ? (string)orgIdentifier_ : ""; }
            set
            {
                orgIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                orgIdentifierCase_ = OrgIdentifierOneofCase.OwnerOrgName;
            }
        }
        /// <summary>Gets whether the "owner_org_name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasOwnerOrgName
        {
            get { return orgIdentifierCase_ == OrgIdentifierOneofCase.OwnerOrgName; }
        }
        /// <summary> Clears the value of the oneof if it's currently set to "owner_org_name" </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearOwnerOrgName()
        {
            if (HasOwnerOrgName)
            {
                ClearOrgIdentifier();
            }
        }

        private object placeIdentifier_;
        /// <summary>Enum of possible cases for the "place_identifier" oneof.</summary>
        public enum PlaceIdentifierOneofCase
        {
            None = 0,
            PlaceName = 2,
        }
        private PlaceIdentifierOneofCase placeIdentifierCase_ = PlaceIdentifierOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public PlaceIdentifierOneofCase PlaceIdentifierCase
        {
            get { return placeIdentifierCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPlaceIdentifier()
        {
            placeIdentifierCase_ = PlaceIdentifierOneofCase.None;
            placeIdentifier_ = null;
        }

        private object orgIdentifier_;
        /// <summary>Enum of possible cases for the "org_identifier" oneof.</summary>
        public enum OrgIdentifierOneofCase
        {
            None = 0,
            OwnerOrgName = 3,
        }
        private OrgIdentifierOneofCase orgIdentifierCase_ = OrgIdentifierOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public OrgIdentifierOneofCase OrgIdentifierCase
        {
            get { return orgIdentifierCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearOrgIdentifier()
        {
            orgIdentifierCase_ = OrgIdentifierOneofCase.None;
            orgIdentifier_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other)
        {
            return Equals(other as PlaceIdentifier);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(PlaceIdentifier other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PlaceName != other.PlaceName) return false;
            if (OwnerOrgName != other.OwnerOrgName) return false;
            if (PlaceIdentifierCase != other.PlaceIdentifierCase) return false;
            if (OrgIdentifierCase != other.OrgIdentifierCase) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasPlaceName) hash ^= PlaceName.GetHashCode();
            if (HasOwnerOrgName) hash ^= OwnerOrgName.GetHashCode();
            hash ^= (int)placeIdentifierCase_;
            hash ^= (int)orgIdentifierCase_;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            output.WriteRawMessage(this);
#else
      if (HasPlaceName) {
        output.WriteRawTag(18);
        output.WriteString(PlaceName);
      }
      if (HasOwnerOrgName) {
        output.WriteRawTag(26);
        output.WriteString(OwnerOrgName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
        {
            if (HasPlaceName)
            {
                output.WriteRawTag(18);
                output.WriteString(PlaceName);
            }
            if (HasOwnerOrgName)
            {
                output.WriteRawTag(26);
                output.WriteString(OwnerOrgName);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }
#endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize()
        {
            int size = 0;
            if (HasPlaceName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PlaceName);
            }
            if (HasOwnerOrgName)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerOrgName);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(PlaceIdentifier other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.PlaceIdentifierCase)
            {
                case PlaceIdentifierOneofCase.PlaceName:
                    PlaceName = other.PlaceName;
                    break;
            }

            switch (other.OrgIdentifierCase)
            {
                case OrgIdentifierOneofCase.OwnerOrgName:
                    OwnerOrgName = other.OwnerOrgName;
                    break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input)
        {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            input.ReadRawMessage(this);
#else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            PlaceName = input.ReadString();
            break;
          }
          case 26: {
            OwnerOrgName = input.ReadString();
            break;
          }
        }
      }
#endif
        }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 18:
                        {
                            PlaceName = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            OwnerOrgName = input.ReadString();
                            break;
                        }
                }
            }
        }
#endif

    }

    #endregion

}

#endregion Designer generated code
